# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

set $alt Mod1

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
font pango:DejaVu Sans Mono 8

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# Start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# Kill focused window
bindsym $mod+Shift+q kill

# Start rofi (a program launcher)
bindsym $mod+Shift+d exec --no-startup-id rofi -show run -disable-history
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
bindsym $mod+d exec --no-startup-id rofi -show drun -disable-history

# Launch flameshot selection tool
bindsym $mod+p exec --no-startup-id flameshot gui

# Launch bwmenu (a bitwarden integration with rofi)
bindsym $mod+Control+p exec --no-startup-id bwmenu

# Launch an emoji selector in rofi
bindsym $mod+Shift+p exec --no-startup-id rofi -show emoji -disable-history

# Define Vim-like movement keys
set $left h
set $down j
set $up k
set $right l

# Change focus
bindsym $mod+$left focus left
bindsym $mod+$down focus down
bindsym $mod+$up focus up
bindsym $mod+$right focus right
# Alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Change focused screen
bindsym $mod+$alt+$left focus output left
bindsym $mod+$alt+$down focus output down
bindsym $mod+$alt+$up focus output up
bindsym $mod+$alt+$right focus output right
# Alternatively, you can use the cursor keys:
bindsym $mod+$alt+Left focus output left
bindsym $mod+$alt+Down focus output down
bindsym $mod+$alt+Up focus output up
bindsym $mod+$alt+Right focus output right

# Change screen for a given workspace
bindsym $mod+$alt+Control+$left move workspace to output left
bindsym $mod+$alt+Control+$down move workspace to output down
bindsym $mod+$alt+Control+$up move workspace to output up
bindsym $mod+$alt+Control+$right move workspace to output right
# Alternatively, you can use the cursor keys:
bindsym $mod+$alt+Control+Left move workspace to output left
bindsym $mod+$alt+Control+Down move workspace to output down
bindsym $mod+$alt+Control+Up move workspace to output up
bindsym $mod+$alt+Control+Right move workspace to output right

# Change screen for a given window
bindsym $mod+$alt+Shift+$left move container to output left
bindsym $mod+$alt+Shift+$down move container to output down
bindsym $mod+$alt+Shift+$up move container to output up
bindsym $mod+$alt+Shift+$right move container to output right
# Alternatively, you can use the cursor keys:
bindsym $mod+$alt+Shift+Left move container to output left
bindsym $mod+$alt+Shift+Down move container to output down
bindsym $mod+$alt+Shift+Up move container to output up
bindsym $mod+$alt+Shift+Right move container to output right

# Scroll through workspaces on given screen
bindsym $mod+Control+$left workspace prev_on_output
bindsym $mod+Control+$right workspace next_on_output
# Alternatively, you can use the cursor keys:
bindsym $mod+Control+Left workspace prev_on_output
bindsym $mod+Control+Right workspace next_on_output

# Use scratchpad workspace
bindsym $mod+Control+$up move to scratchpad
bindsym $mod+Control+$down scratchpad show
# Alternatively, you can use the cursor keys:
bindsym $mod+Control+Up move to scratchpad
bindsym $mod+Control+Down scratchpad show

# Move focused window
bindsym $mod+Shift+$left move left 10 px
bindsym $mod+Shift+$down move down 10 px
bindsym $mod+Shift+$up move up 10 px
bindsym $mod+Shift+$right move right 10 px
# Alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left 10 px
bindsym $mod+Shift+Down move down 10 px
bindsym $mod+Shift+Up move up 10 px
bindsym $mod+Shift+Right move right 10 px

# Split in horizontal orientation
bindsym $mod+g split h

# Split in vertical orientation
bindsym $mod+v split v

# Enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# Change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# Toggle tiling / floating
bindsym $mod+Control+space floating toggle

# Change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# Focus the parent container
bindsym $mod+q focus parent

# Focus the child container
bindsym $mod+a focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"

# Define code for numeric keys
set $one 10
set $two 11
set $three 12
set $four 13
set $five 14
set $six 15
set $seven 16
set $eight 17
set $nine 18
set $zero 19

# Switch to workspace
bindcode $mod+$one workspace number $ws1
bindcode $mod+$two workspace number $ws2
bindcode $mod+$three workspace number $ws3
bindcode $mod+$four workspace number $ws4
bindcode $mod+$five workspace number $ws5
bindcode $mod+$six workspace number $ws6
bindcode $mod+$seven workspace number $ws7
bindcode $mod+$eight workspace number $ws8
bindcode $mod+$nine workspace number $ws9

# Move focused container to workspace
bindcode $mod+Shift+$one move container to workspace number $ws1
bindcode $mod+Shift+$two move container to workspace number $ws2
bindcode $mod+Shift+$three move container to workspace number $ws3
bindcode $mod+Shift+$four move container to workspace number $ws4
bindcode $mod+Shift+$five move container to workspace number $ws5
bindcode $mod+Shift+$six move container to workspace number $ws6
bindcode $mod+Shift+$seven move container to workspace number $ws7
bindcode $mod+Shift+$eight move container to workspace number $ws8
bindcode $mod+Shift+$nine move container to workspace number $ws9

# Reload the configuration file
bindsym $mod+Shift+c reload
# Restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# Exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# Resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        # Not holding modifiers will resize by 10 px or ppt
        # Using ctrl will resize by 50 px or ppt
        # Using shift will resize by 100 px or ppt
        # Using shift+ctrl will resize by 250 px or ppt
        bindsym $left resize shrink width 10 px or 10 ppt
        bindsym $down resize grow height 10 px or 10 ppt
        bindsym $up resize shrink height 10 px or 10 ppt
        bindsym $right resize grow width 10 px or 10 ppt
        bindsym Control+$left resize shrink width 50 px or 50 ppt
        bindsym Control+$down resize grow height 50 px or 50 ppt
        bindsym Control+$up resize shrink height 50 px or 50 ppt
        bindsym Control+$right resize grow width 50 px or 50 ppt
        bindsym Shift+$left resize shrink width 100 px or 100 ppt
        bindsym Shift+$down resize grow height 100 px or 100 ppt
        bindsym Shift+$up resize shrink height 100 px or 100 ppt
        bindsym Shift+$right resize grow width 100 px or 100 ppt
        bindsym Control+Shift+$left resize shrink width 250 px or 250 ppt
        bindsym Control+Shift+$down resize grow height 250 px or 250 ppt
        bindsym Control+Shift+$up resize shrink height 250 px or 250 ppt
        bindsym Control+Shift+$right resize grow width 250 px or 250 ppt

        # Same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt
        bindsym Control+Left resize shrink width 50 px or 50 ppt
        bindsym Control+Down resize grow height 50 px or 50 ppt
        bindsym Control+Up resize shrink height 50 px or 50 ppt
        bindsym Control+Right resize grow width 50 px or 50 ppt
        bindsym Shift+Left resize shrink width 100 px or 100 ppt
        bindsym Shift+Down resize grow height 100 px or 100 ppt
        bindsym Shift+Up resize shrink height 100 px or 100 ppt
        bindsym Shift+Right resize grow width 100 px or 100 ppt
        bindsym Control+Shift+Left resize shrink width 250 px or 250 ppt
        bindsym Control+Shift+Down resize grow height 250 px or 250 ppt
        bindsym Control+Shift+Up resize shrink height 250 px or 250 ppt
        bindsym Control+Shift+Right resize grow width 250 px or 250 ppt

        # Back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"

mode "floating movement" {

        # Move the window using movement keys
        # Not holding modifiers will move by 50 px
        # Using ctrl will move by 1 px
        # Using shift will move by 100 px
        bindsym $left move left 50 px
        bindsym $down move down 50 px
        bindsym $up move up 50 px
        bindsym $right move right 50 px
        bindsym Control+$left move left 1 px
        bindsym Control+$down move down 1 px
        bindsym Control+$up move up 1 px
        bindsym Control+$right move right 1 px
        bindsym Shift+$left move left 100 px
        bindsym Shift+$down move down 100 px
        bindsym Shift+$up move up 100 px
        bindsym Shift+$right move right 100 px

        # Same bindings, but for the arrow keys
        bindsym Left move left 50 px
        bindsym Down move down 50 px
        bindsym Up move up 50 px
        bindsym Right move right 50 px
        bindsym Control+Left move left 1 px
        bindsym Control+Down move down 1 px
        bindsym Control+Up move up 1 px
        bindsym Control+Right move right 1 px
        bindsym Shift+Left move left 100 px
        bindsym Shift+Down move down 100 px
        bindsym Shift+Up move up 100 px
        bindsym Shift+Right move right 100 px

        # Back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+Shift+space mode "default"
}

bindsym $mod+Shift+space mode "floating movement"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        status_command i3blocks
        #status_command i3status
        tray_output primary
        position top

        colors {
                background #021215
                statusline #93a1a1
                separator #2aa198

                # Type              border  background font
                focused_workspace   #2aa198 #073642 #eee895
                active_workspace    #073642 #002b36 #839496
                inactive_workspace  #002b36 #021215 #586e75
                urgent_workspace    #cb4b16 #dc322f #fdf6e3
        }
}

# Shutdown menu
set $mode_shutdown (l)ock, (e)xit, switch_(u)ser, (s)uspend, (h)ibernate, (r)eboot, (Shift+s)hutdown

mode "$mode_shutdown" {
        bindsym l exec --no-startup-id i3exit lock, mode "default"
        bindsym s exec --no-startup-id i3exit suspend, mode "default"
        bindsym u exec --no-startup-id i3exit switch_user, mode "default"
        bindsym e exec --no-startup-id i3exit logout, mode "default"
        bindsym h exec --no-startup-id i3exit hibernate, mode "default"
        bindsym r exec --no-startup-id i3exit reboot, mode "default"

        bindsym Shift+s exec --no-startup-id i3exit shutdown, mode "default"
        # Exit system mode: "Enter" or "Escape" or $mod+'0'
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindcode $mod+$zero mode "default"
}

# Bind it to the Meta + '0' key
bindcode $mod+$zero mode "$mode_shutdown"

# Set second display background according to orientation, or none
set $mode_background (v)ertical layout, (h)orizontal layout, (s)ingle layout

mode "$mode_background" {
        bindsym v exec --no-startup-id set-background vertical, mode "default"
        bindsym h exec --no-startup-id set-background horizontal, mode "default"
        bindsym s exec --no-startup-id set-background single, mode "default"

        # Exit background mode: "Enter" or "Escape" or $mod+b
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+b mode "default"
}

bindsym $mod+b mode "$mode_background"

# Enable or disable vpn permanently
set $mode_vpn (e)nable (d)isable vpn

mode "$mode_vpn" {
        bindsym e exec --no-startup-id toggle-vpn --visual up, mode "default"
        bindsym d exec --no-startup-id toggle-vpn --visual down, mode "default"

        # Exit vpn mode: "Enter" or "Escape" or $mod+x
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+c mode "default"
}

bindsym $mod+c mode "$mode_vpn"

# Enable or disable xautolock permanently
set $mode_xautolock (e)nable (d)isable Xautolock

mode "$mode_xautolock" {
        bindsym e exec --no-startup-id toggle-xautolock enable, mode "default"
        bindsym d exec --no-startup-id toggle-xautolock disable, mode "default"

        # Exit xautolock mode: "Enter" or "Escape" or $mod+x
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+x mode "default"
}

bindsym $mod+x mode "$mode_xautolock"

# Display indicators for caps-lock and num-lock
bindsym --release Caps_Lock exec pkill -SIGRTMIN+11 i3blocks
#bindsym --release Num_Lock  exec pkill -SIGRTMIN+11 i3blocks

# Bind volume control keys and signal i3blocks on update
bindsym XF86AudioRaiseVolume exec amixer -q -D pulse sset Master 5%+ && pkill -RTMIN+10 i3blocks
bindsym XF86AudioLowerVolume exec amixer -q -D pulse sset Master 5%- && pkill -RTMIN+10 i3blocks
bindsym Shift+XF86AudioRaiseVolume exec amixer -q -D pulse sset Master 1%+ && pkill -RTMIN+10 i3blocks
bindsym Shift+XF86AudioLowerVolume exec amixer -q -D pulse sset Master 1%- && pkill -RTMIN+10 i3blocks
bindsym XF86AudioMute exec amixer -q -D pulse sset Master toggle && pkill -RTMIN+10 i3blocks
# Bind media control keys and signal i3blocks on update
bindsym XF86AudioPlay exec playerctl play-pause && pkill -RTMIN+10 i3blocks
bindsym XF86AudioNext exec playerctl next && pkill -RTMIN+10 i3blocks
bindsym XF86AudioPrev exec playerctl previous && pkill -RTMIN+10 i3blocks

# Bind keyboard settings key to toggle touchpad
bindsym XF86Tools exec toggle-touchpad
# Bind display control to launch arandr
bindsym XF86Display exec arandr

# Bind sreen brightness controls
bindsym XF86MonBrightnessUp exec xbacklight -inc 10 && notify-send -h string:x-canonical-private-synchronous:bright -t 500 -u low "Increment brightness: $(printf '%.0f' `xbacklight -get`)%"
bindsym XF86MonBrightnessDown exec xbacklight -dec 10 && notify-send -h string:x-canonical-private-synchronous:bright -t 500 -u low "Decrement brightness: $(printf '%.0f' `xbacklight -get`)%"
bindsym Shift+XF86MonBrightnessUp exec xbacklight -inc 1 && notify-send -h string:x-canonical-private-synchronous:bright -t 500 -u low "Increment brightness: $(printf '%.0f' `xbacklight -get`)%"
bindsym Shift+XF86MonBrightnessDown exec xbacklight -dec 1 && notify-send -h string:x-canonical-private-synchronous:bright -t 500 -u low "Decrement brightness: $(printf '%.0f' `xbacklight -get`)%"

# Auto start system tray applets
exec --no-startup-id blueman-applet
exec --no-startup-id nm-applet
exec --no-startup-id /usr/lib/geoclue-2.0/demos/agent
exec --no-startup-id redshift-gtk
exec --no-startup-id QSyncthingTray
# Removable media automounter
exec --no-startup-id udiskie --tray
# Start dunst notification daemon
exec --no-startup-id dunst
# Notify when battery is at 15% and 5% percent
exec --no-startup-id i3-battery-popup -n -L 15 -l 5
# Autolock after 1 minute without any input, lock on upper-left, don't in lower-right
exec --no-startup-id xautolock -detectsleep -time 3 -cornerdelay 5 -cornerredelay 5 -corners +00- -locker "i3exit lock" -notify 5 -notifier "notify-send -u critical -t 5000 -- 'Locking screen in 5 seconds'"

# Set the wallpaper using the last settings
exec --no-startup-id ~/.fehbg

# Set the custom key bindings using Xmodmap
exec --no-startup-id xmodmap ~/.config/xmodmap/config

# Make tridactyl-spawned editor floating by default
for_window [class="tridactyl_editor"] floating enable border pixel 1
# Make blueman windows floating by default
for_window [class="^Blueman-.*$"] floating enable
# Make htop windows floating by default
for_window [title="^htop$"] floating enable
# Make Thunderbird filter window floating by default
for_window [class="Thunderbird" instance="Mailnews" window_role="filterlist"] floating enable
# Make Pulse Audio Volume Control floating by default
for_window [class="^Pavucontrol.*$"] floating enable
# Make Arandr floating by default
for_window [class="Arandr"] floating enable
